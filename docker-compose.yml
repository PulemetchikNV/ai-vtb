services:
  resumeparsing:
    build:
      context: .
      dockerfile: resumeParsing/Dockerfile
    container_name: resume-parsing
    image: resumeparsing:latest
    environment:
      - UPLOADS_DIR=/app/data/uploads
      - CHROMA_DIR=/app/data/chroma
      - CHROMA_COLLECTION=resumes
      - EMBED_MODEL=sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2
      - CHUNK_SIZE=800
      - CHUNK_OVERLAP=120
    ports:
      - "8000:8000"
    volumes:
      - ./resumeParsing/app:/app/app:ro
      - ./data/uploads:/app/data/uploads
      - ./data/chroma:/app/data/chroma
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: node-backend
    image: node-backend:latest
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_vtb?schema=public
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - IS_PROXY_API_ENABLED=${IS_PROXY_API_ENABLED}
      - IS_IMAGE_GENERATION_ENABLED=${IS_IMAGE_GENERATION_ENABLED}
      - PROXY_API_KEY=${PROXY_API_KEY}
      - RAG_API_URL=http://resumeparsing:8000
      - TTS_URL=${TTS_URL:-http://tts:8081}
      - EMOTIONS_URL=${EMOTIONS_URL:-http://emotions:5000}
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app:ro
    depends_on:
      - resumeparsing
    restart: unless-stopped

  tts:
    build:
      context: ./tts
      dockerfile: Dockerfile
    container_name: tts
    image: tts:latest
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY_TTS}
      - YANDEX_IAM_TOKEN=${YANDEX_IAM_TOKEN}
    ports:
      - "8081:8081"
    restart: unless-stopped

  emotions:
    build:
      context: ./emotions-parser
      dockerfile: Dockerfile
    container_name: emotions
    image: emotions-parser:latest
    environment:
      - HF_HOME=/app/hf_cache
      - TRANSFORMERS_CACHE=/app/hf_cache
      - HUGGINGFACE_HUB_CACHE=/app/hf_cache
      - YANDEX_IAM_TOKEN=${YANDEX_IAM_TOKEN}
    # - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_HUB_TOKEN}
    ports:
      - "5000:5000"
    restart: unless-stopped

  frontend-dev:
    image: node:20-alpine
    working_dir: /app
    container_name: frontend-dev
    command: sh -c "npm install && npm run dev -- --host"
    volumes:
      - ./frontend:/app
      - node_modules_cache:/app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "5174:5173"
    depends_on:
      - resumeparsing
    restart: unless-stopped

volumes:
  node_modules_cache:


