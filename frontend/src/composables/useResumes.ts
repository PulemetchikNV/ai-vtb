import { ref } from 'vue'
import { axiosInstance } from '../plugins/axios'

export type Resume = {
    id: string
    fileName: string
    text: string
    createdAt: string
    updatedAt: string
}

export type ResumeError = {
    type: 'validation' | 'network' | 'server' | 'file' | 'auth' | 'unknown'
    message: string
    code?: number
    details?: string
}

const api = axiosInstance

function parseError(error: any): ResumeError {
    if (!error) {
        return { type: 'unknown', message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }
    }

    const response = error.response
    const status = response?.status
    const data = response?.data

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–æ–≤
    if (status === 401) {
        return {
            type: 'auth',
            message: data?.message || '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            code: 401
        }
    }

    if (status === 403) {
        return {
            type: 'auth',
            message: data?.message || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–µ—Å—É—Ä—Å—É',
            code: 403
        }
    }

    if (status === 404) {
        return {
            type: 'server',
            message: data?.message || '–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
            code: 404
        }
    }

    if (status === 413) {
        return {
            type: 'file',
            message: data?.message || '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
            code: 413
        }
    }

    if (status === 415) {
        return {
            type: 'file',
            message: data?.message || '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞',
            code: 415
        }
    }

    if (status >= 400 && status < 500) {
        return {
            type: 'validation',
            message: data?.message || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
            code: status,
            details: data?.detail
        }
    }

    if (status >= 500) {
        return {
            type: 'server',
            message: data?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
            code: status
        }
    }

    // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
    if (error.code === 'NETWORK_ERROR' || error.message?.includes('Network Error')) {
        return {
            type: 'network',
            message: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É'
        }
    }

    if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {
        return {
            type: 'network',
            message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞'
        }
    }

    // Fallback
    return {
        type: 'unknown',
        message: data?.message || error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }
}

export function useResumes() {
    const resumes = ref<Resume[]>([])
    const loading = ref(false)
    const error = ref<ResumeError | null>(null)

    async function load() {
        loading.value = true
        error.value = null
        try {
            const res = await api.get<Resume[]>('/resumes')
            resumes.value = res.data
            return res.data
        } catch (e: any) {
            const parsedError = parseError(e)
            error.value = parsedError
            throw parsedError
        } finally {
            loading.value = false
        }
    }

    async function create(v: { fileName: string; text?: string; file?: File | null }) {
        loading.value = true
        error.value = null

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            if (!v.fileName?.trim()) {
                const validationError: ResumeError = {
                    type: 'validation',
                    message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                }
                error.value = validationError
                throw validationError
            }

            if (!v.file && !v.text?.trim()) {
                const validationError: ResumeError = {
                    type: 'validation',
                    message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ'
                }
                error.value = validationError
                throw validationError
            }

            if (v.file && v.file.size > 10 * 1024 * 1024) {
                const validationError: ResumeError = {
                    type: 'file',
                    message: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë'
                }
                error.value = validationError
                throw validationError
            }

            let res
            if (v.file) {
                const fd = new FormData()
                fd.append('fileName', v.fileName.trim())
                if (v.text?.trim()) fd.append('text', v.text.trim())
                fd.append('pdf', v.file)
                res = await api.post<Resume>('/resumes', fd, {
                    timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                })
            } else {
                res = await api.post<Resume>('/resumes', {
                    fileName: v.fileName.trim(),
                    text: v.text?.trim()
                })
            }

            resumes.value = [res.data, ...resumes.value]
            return res.data
        } catch (e: any) {
            const parsedError = parseError(e)
            error.value = parsedError
            throw parsedError
        } finally {
            loading.value = false
        }
    }

    async function update(id: string, v: Partial<{ fileName: string; text: string; file: File | null; pdfBase64?: string }>) {
        loading.value = true
        error.value = null

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            if (!id?.trim()) {
                const validationError: ResumeError = {
                    type: 'validation',
                    message: 'ID —Ä–µ–∑—é–º–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                }
                error.value = validationError
                throw validationError
            }

            if (!v.fileName?.trim() && !v.text?.trim() && !v.file && !v.pdfBase64) {
                const validationError: ResumeError = {
                    type: 'validation',
                    message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—é–º–µ'
                }
                error.value = validationError
                throw validationError
            }

            if (v.file && v.file.size > 10 * 1024 * 1024) {
                const validationError: ResumeError = {
                    type: 'file',
                    message: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë'
                }
                error.value = validationError
                throw validationError
            }

            let res
            if (v.file) {
                const fd = new FormData()
                if (v.fileName?.trim()) fd.append('fileName', v.fileName.trim())
                if (v.text?.trim()) fd.append('text', v.text.trim())
                fd.append('pdf', v.file)
                res = await api.put<Resume>(`/resumes/${id}`, fd, {
                    timeout: 60000,
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                })
            } else {
                const updateData: any = {}
                if (v.fileName?.trim()) updateData.fileName = v.fileName.trim()
                if (v.text?.trim()) updateData.text = v.text.trim()
                if (v.pdfBase64) updateData.pdfBase64 = v.pdfBase64
                res = await api.put<Resume>(`/resumes/${id}`, updateData)
            }

            resumes.value = resumes.value.map(x => x.id === id ? res.data : x)
            return res.data
        } catch (e: any) {
            const parsedError = parseError(e)
            error.value = parsedError
            throw parsedError
        } finally {
            loading.value = false
        }
    }

    async function remove(id: string) {
        loading.value = true
        error.value = null
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            if (!id?.trim()) {
                const validationError: ResumeError = {
                    type: 'validation',
                    message: 'ID —Ä–µ–∑—é–º–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                }
                error.value = validationError
                throw validationError
            }

            await api.delete(`/resumes/${id}`)
            resumes.value = resumes.value.filter(v => v.id !== id)
        } catch (e: any) {
            const parsedError = parseError(e)
            error.value = parsedError
            throw parsedError
        } finally {
            loading.value = false
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    function getErrorMessage(error: ResumeError | null): string {
        if (!error) return ''

        const typeMessages = {
            validation: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
            network: 'üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é',
            server: 'üîß –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            file: 'üìÑ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–º',
            auth: 'üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            unknown: '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }

        return `${typeMessages[error.type]} ‚Ä¢ ${error.message}`
    }

    return {
        resumes,
        loading,
        error,
        load,
        create,
        update,
        remove,
        getErrorMessage
    }
}


