generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  hr
}

model Chat {
  id                     String    @id @default(cuid())
  title                  String?
  vacancyId              String?
  vacancy                Vacancy?  @relation(fields: [vacancyId], references: [id], onDelete: SetNull)
  resumeId               String?
  resume                 Resume?   @relation(fields: [resumeId], references: [id], onDelete: SetNull)
  requirements_checklist Json?
  analysis               Json?
  facts_meta             Json?
  is_finished            Boolean   @default(false)
  userId                 String?
  user                   User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  messages               Message[]
}

model Message {
  id            String   @id @default(cuid())
  chatId        String
  role          String // 'user' | 'assistant' | 'system'
  content       String
  hiddenContent String?
  createdAt     DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model Vacancy {
  id                     String   @id @default(cuid())
  title                  String
  description_text       String
  requirements_checklist Json
  category_weights       Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  chats                  Chat[]
  userId                 String?
  user                   User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Resume {
  id        String   @id @default(cuid())
  fileName  String
  text_raw  String?
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[]
  facts     Json?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  role        Role      @default(user)
  telegram_id String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chats       Chat[]
  vacancies   Vacancy[]
  resumes     Resume[]
}
