import { INITIAL_DIALOG_PROMPT } from "../__data__/prompts"
import { aiService } from "./ai"
import { prisma } from "../prisma"
import type { Vacancy, Message } from "../../prisma/generated/client"
import { chatDebugLog, chatDebugSeparator } from "./chatDebug"
import type { QualityAnalyzerOutput } from "../chains/qualityAnalyzerChain"
import type { ContradictingFactRef, Contradiction, FactsMeta } from "./factsMeta"

type GetNextMessageParams = {
    userMessage: string,
    messageHistory: Message[],
    chatId: string,
    analyzerMeta?: QualityAnalyzerOutput | null
}

export const dialogueService = {
    async getInitialMessage({ vacancy, resumeText, lang }: { vacancy: Vacancy, resumeText?: string, lang?: string }) {
        if(!lang) lang = 'ru'

        const basePrompt = INITIAL_DIALOG_PROMPT({ vacancy })
        let prompt = basePrompt
        if(resumeText) {
            prompt += `
        \n[–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é):\n${resumeText}\n]`
        }
        prompt += `
        \n[–Ø–ó–´–ö –î–ò–ê–õ–û–ì–ê: ${lang}. –ù–ï –û–ë–†–ê–©–ê–ô –í–ù–ò–ú–ê–ù–ò–ï –ù–ê –¢–û –ö–ê–ö–û–ô –Ø–ó–´–ö –í –†–ï–ó–Æ–ú–ï, –í–ï–î–ò –î–ò–ê–õ–û–ì –¢–û–õ–¨–ö–û –ù–ê –ù–ï–ú. –ù–µ –≤—Å—Ç–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏ –ø—Ä–æ—á–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä—É–¥–Ω–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏]
        `

        const initialMessage = await aiService.communicateWithGemini([{ role: 'user', content: prompt }], true)

        return {
            systemPrompt: prompt,
            initialMessage
        }
    },
    async getNextMessage({ userMessage, messageHistory, chatId, analyzerMeta }: GetNextMessageParams) {
        await chatDebugSeparator(chatId)
        // fetch latest contradictions
        const chat = await prisma.chat.findUnique({ where: { id: chatId }, select: { facts_meta: true, lang: true } }) as any
        const chatLang = chat?.lang || 'ru'
        const contradictions = (chat?.facts_meta as FactsMeta)?.contradictions || []
        const notSent = contradictions.filter((c: Contradiction) => !c.sent)
        chatDebugLog(chatId, `–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Å—Ç—ã–∫–æ–≤–∫–∏: ${JSON.stringify(notSent)}`)

        const contradictionsNote = notSent.length ? `
        \n\n[–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Å—Ç—ã–∫–æ–≤–∫–∏, —É–ø–æ–º—è–Ω–∏ –∏—Ö –≤ –æ—Ç–≤–µ—Ç–µ –∏ —Å—Ç—Ä–æ–π –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è,
        –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.

        –ù–µ—Å–æ—Å—Ç—ã–∫–æ–≤–∫–∏:
            ${notSent.map(
            (c: Contradiction) => `- ${c.explanation} 
                    (—Ñ–∞–∫—Ç—ã-–æ—Å–Ω–æ–≤–∞–Ω–∏—è: ${c.conflicting_facts
                    .map((f: ContradictingFactRef) => `${f.fact}(${f.source === 'resume' ? '–∫–∞–Ω–¥–∏–¥–∞—Ç —É–∫–∞–∑–∞–ª –≤ —Ä–µ–∑—é–º–µ' : '–∫–∞–Ω–¥–∏–¥–∞—Ç —É–ø–æ–º–∏–Ω–∞–ª –≤ —á–∞—Ç–µ'})`).join(', ')})`
        ).join('\n')
            }
        ]
        ` : ''

        const qualityNote = analyzerMeta ? `
        \n\n[–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞):
        - –®–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${analyzerMeta.is_canned_answer ? '–¥–∞' : '–Ω–µ—Ç'}
        ${
            // analyzerMeta.is_canned_answer ? `–£–ø–æ–º—è–Ω–∏ –≤ —Å–≤–æ–µ–π —Ñ—Ä–∞–∑–µ —á—Ç–æ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞` : ''
            ''
            }
        - –£–∫–ª–æ–Ω—á–∏–≤–æ—Å—Ç—å: ${analyzerMeta.is_evasive ? '–¥–∞' : '–Ω–µ—Ç'}
        ${
            // analyzerMeta.is_evasive ? `–í–µ—Ä–Ω–∏ —Ä—É—Å–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É –∏ –∑–∞—Å—Ç–∞–≤—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å` : ''
            ''
            }
        - –ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: ${analyzerMeta.is_not_full_answer ? '–¥–∞' : '–Ω–µ—Ç'}
        ${
            // analyzerMeta.is_not_full_answer ? `–£–ø–æ–º—è–Ω–∏ –≤ —Å–≤–æ–µ–π —Ñ—Ä–∞–∑–µ —á—Ç–æ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—é —Å—É—Ç—å –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞` : ''
            ''
            }
        –ü–æ—è—Å–Ω–µ–Ω–∏–µ: ${analyzerMeta.analysis}
        ]
        ` : ''

        const langNote = `
        \n\n(–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ë–ï–°–ï–î–´) [–Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞: ${chatLang}. –ù–µ –≤—Å—Ç–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏ –ø—Ä–æ—á–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä—É–¥–Ω–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏]
        `

        const formattedMessages = messageHistory.slice(0, -1).map(message => ({
            role: message.role === 'user' ? 'user' as const : 'model' as const,
            content: `${message.content}${message.hiddenContent ? ` \n\n${message.hiddenContent}` : ''}`
        }
        ))
        formattedMessages.push({ role: 'user' as const, content: `${userMessage}${contradictionsNote}${qualityNote}${langNote}`, })

        try {
            const aiResponse = await aiService.communicateWithGemini(formattedMessages)
            await chatDebugLog(chatId, `–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ ${JSON.stringify(aiResponse)}`)

            // mark contradictions as sent
            if (notSent.length) {
                const current = (chat?.facts_meta) || {}
                const updated = (current.contradictions || []).map((c: Contradiction) => ({ ...c, sent: true }))
                await prisma.chat.update({ where: { id: chatId }, data: { facts_meta: { ...current, contradictions: updated } } })
            }

            return aiResponse
        } catch (error: any) {
            await chatDebugLog(chatId, `–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI: ${error.message || error}`)
            console.error('Error in getNextMessage:', error)

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const errorMessage = 'ü§ñ *–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.*'
            return errorMessage
        }
    }
}